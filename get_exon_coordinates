# Function for creating pairs -- from [1, 2, 3, 4] -> [[1, 2], [3, 4]]
def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]


d_single = {} # dict for separate positions, here key is chromosome and value is list with exon positions
d_pairs = {} # the same, but for paired exon positions


with open('./big_canonical_Mus.txt', 'r') as file: # Canonical isoforms for Mus
    for line in file:
        line = line.strip().split('\t')

        off_start, off_end = int(line[5]), int(line[6]) # CDS start, CDS end

        # Get coordinates of exons
        start, end = line[8][:-1].split(','), line[9][:-1].split(',')
        start_end = (list(zip(start, end)))
        start_end = [list(i) for i in start_end]
        exons = [[int(j) for j in i] for i in start_end]   

        # get exons according CDS (because not exons in annotation are in CDS)
        lst_exons = []
        lst_lengths = []
        for exon in exons:
            start, end = exon[0], exon[1]
            if not(start <= off_start <= end and start <= off_end <= end):
                if (start <= off_start <= end or start >= off_start) and (start <= off_end <= end or end <= off_end):
                    if start <= off_start <= end:
                        lst_lengths.append(abs(off_start - end))
                        lst_exons.append([start, end])
                    elif start <= off_end <= end:
                        lst_lengths.append(abs(start - off_end))
                        lst_exons.append([start, end])
                    else:
                        lst_lengths.append(abs(start - end))
                        lst_exons.append([start, end])
                                # Create dict for pairs
                                
                                
        lst_introns = []
        for item in lst_exons:
            if len(item) > 1:
#                print(item)
                if lst_exons.index(item) == 0:
                    lst_introns.append(item[1] + 1) # for second position, because it's first exon
                elif lst_exons.index(item) == -1 or lst_exons.index(item) == len(lst_exons) - 1:
                    lst_introns.append(item[0] - 1) # for first position because it's last exon

                elif lst_exons.index(item) != 0 and lst_exons.index(item) != -1 and lst_exons.index(item) != len(lst_exons) - 1: # for both positions
                    lst_introns.append(item[0] - 1)
                    lst_introns.append(item[1] + 1)


        lst_introns_pairs = list(chunks(lst_introns, 2))
        if line[1] not in d_pairs:
            d_pairs[line[1]] = lst_introns_pairs
        else:
            for item in lst_introns_pairs:
                d_pairs[line[1]].append(item)
